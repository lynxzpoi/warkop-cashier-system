// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  emailVerified  DateTime      @default(now())
  hashedPassword String
  address        String
  contact        String
  role           String
  transactions   Transaction[]
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WarkopData {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  contact String
}

enum Type {
  Food
  Drink
  Snack
  Other
}

model Menu {
  id           Int               @id @default(autoincrement())
  name         String
  type         Type
  price        Int
  stock        Int
  transactions TransactionMenu[]

  @@unique([name, price])
}

model Transaction {
  id          Int               @id @default(autoincrement())
  menus       TransactionMenu[]
  cashier     User              @relation(fields: [cashierId], references: [id])
  cashierId   String
  totalAmount Int
  cash        Int
  change      Int
  createdAt   DateTime          @default(now())
}

model TransactionMenu {
  id            Int         @id @default(autoincrement())
  menu          Menu        @relation(fields: [menuId], references: [id])
  menuId        Int
  name          String
  price         Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  quantity      Int
  amount        Int
}
